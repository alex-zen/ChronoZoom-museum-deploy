<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chronozoom.UI</name>
    </assembly>
    <members>
        <member name="M:Chronozoom.UI.IBingSearchAPI.GetImages(System.String,System.String,System.String)">
            <summary>
            Performs images search for a search query via Bing Search API.
            </summary>
            <param name="query">The query to search for.</param>
            <param name="top">The number of the results to return.</param>
            <param name="skip">The offset requested for the srarting point of returned results.</param>
            <returns>Search results (images) in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/bing/getImages?query={query}&top={top}&skip={skip}
            
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IBingSearchAPI.GetVideos(System.String,System.String,System.String)">
            <summary>
            Performs videos search for a search query via Bing Search API.
            </summary>
            <param name="query">The query to search for.</param>
            <param name="top">The number of the results to return.</param>
            <param name="skip">The offset requested for the srarting point of returned results.</param>
            <returns>Search results (videos) in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/bing/getVideos?query={query}&top={top}&skip={skip}
            
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IBingSearchAPI.GetDocuments(System.String,System.String,System.String,System.String)">
            <summary>
            Performs documents web search for a search query via Bing Search API.
            </summary>
            <param name="query">The query to search for.</param>
            <param name="doctype">The filetype to search for.</param>
            <param name="top">The number of the results to return.</param>
            <param name="skip">The offset requested for the srarting point of returned results.</param>
            <returns>Search results (documents) in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/bing/getDocuments?query={query}&doctype={doctype}&top={top}&skip={skip}
            
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.ExportTimelines(System.String)">
            <summary>
            For exporting a timeline and it's descendant sub-timelines to temporary storage so can be imported later
            as a copy under a different timeline or collection.
            </summary>
            <param name="topmostTimelineId">Must be a GUID, provided as a string.</param>
            <returns>
            A flattened list of timelines in JSON format, starting with the timeline indicated via the topmostTimelineId,
            and including each descendant timeline. (Timelines can contain child timelines.)
            Each flattened timeline entry includes all of it's exhibits and their content items.
            </returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.ImportTimelines(System.String,System.Collections.Generic.List{Chronozoom.UI.Utils.ExportImport.FlatTimeline})">
            <summary>
            For importing a timeline and it's descendant sub-timelines into an existing timeline.
            Typically this is a timeline from a different collection that is being copied.
            It should be noted that the supplied new timeline tree to import must fit within the
            date bounds of the target destination timeline's start and end dates.
            </summary>
            <param name="intoTimelineId">Must be a GUID, provided as a string.</param>
            <param name="newTimelineTree">Must be a structure created by an IChronozoomSVC.ExportTimelines implementation, provided as a JSON.stringify string.</param>
            <returns>A success, warning about date bounds exceeded, or general error message.</returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetTimelines(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns timeline data within a specified range of years from a collection or a superCollection.
            </summary>
            <param name="superCollection">Name of the superCollection to query.</param>
            <param name="collection">Name of the collection to query.</param>
            <param name="start">Year at which to begin the search, between -20000000000 and 9999.</param>
            <param name="end">Year at which to end the search, between -20000000000 and 9999.</param>
            <param name="minspan">Filters the search results to a particular time scale.</param>
            <param name="commonAncestor">Least Common Ancestor, a timeline identifier used to hint the server to retrieve timelines close to this location.</param>
            <param name="maxElements">The maximum number of elements to return.</param>
            <param name="depth">The max depth for children timelines.</param>
            <returns>Timeline data in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/gettimelines?supercollection={supercollection}&collection={collection}&start={year}&end={year}
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.Search(System.String,System.String,System.String)">
            <summary>
            Performs a search for a specific term within a collection or a superCollection.
            </summary>
            <remarks>
            The syntax for search is different from other requests. The values for supercollection and collection are specified as request parameters rather than as part of the URL.
            </remarks>
            <param name="superCollection">Name of the supercollection to query.</param>
            <param name="collection">Name of the collection to query.</param>
            <param name="searchTerm">The term to search for.</param>
            <returns>Search results in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/search?searchTerm={term}&supercollection={supercollection}&collection={collection}
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetDefaultTours">
            <summary>
            Returns a list of tours for the default collection and default superCollection.
            </summary>
            <returns>A list of tours in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL: 
            http://{URL}/api/tours
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetTours(System.String,System.String)">
            <summary>
            Returns a list of tours for a given collection or superCollection.
            </summary>
            <param name="superCollection">Name of the superCollection to query.</param>
            <param name="collection">Name of the collection to query.</param>
            <returns>A list of tours in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL: 
            http://{URL}/api/{supercollection}/{collection}/tours
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutUser(Chronozoom.Entities.User)">
            <summary>
            Creates a new user, or updates an existing user's information and associated personal collection.
            </summary>
            <remarks>
            If the user ID is omitted then a new user is created.
            If there is no ACS the user is treated as anonymous and granted access to the sandbox collection.
            If the anonymous user does not exist in the database then it is created.
            A new superCollection with the user's display name is added.
            A new default collection with the user's display name is added to this superCollection.
            A new user with the specified attributes is created.
            If the specified user display name does not exist it is considered an error.
            If the user display name is specified and it exists then the user's attributes are updated.
            </remarks>
            <param name="userRequest">JSON containing the request details.</param>
            <returns>The URL for the new user collection.</returns>
            <example><![CDATA[  
            HTTP verb: PUT
            URL:
            http://{URL}/api/{supercollection}/{collection}/user
            
            Request body:
            {
                id: "0123456789",
                displayName: "Joe",
                email: "email@email.com"
            }
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetServiceInformation">
            <summary>
            Internal. Provides information about the ChronoZoom service to clients.
            </summary>
            <returns>A ServiceInformation object describing parameter from the running service</returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteUser(Chronozoom.Entities.User)">
             <summary>
             Deletes the user with the specified user ID.
             </summary>
             <param name="userRequest">JSON containing the request details.</param>
             <returns>HTTP response code.</returns>
             <example><![CDATA[  
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/user
            
             Request body:
             {
                 displayName: "Neil"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetUser(System.String)">
            <summary>
            Returns the user by name, if name parameter is empty returns current user.
            </summary>
            <param name="name">The name of user to get.</param>
            <returns>JSON containing data for the current user.</returns>
            <example><![CDATA[ 
            HTTP verb: GET
            URL:
            http://{URL}/api/user
            ]]></example>      
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PostCollection(System.String,System.String,Chronozoom.Entities.Collection)">
             <summary>
             Creates a new collection using the specified name.
             </summary>
             <remarks>
             If a collection of the specified name does not exist then a new collection is created. 
             The title field can't be modified because it is part of the URL (the URL can be indexed).
             </remarks>
             <param name="superCollectionName">The name of the parent supercollection.</param>
             <param name="collectionName">The name of the collection to create.</param>
             <param name="collectionRequest">[Collection](#collection) data in JSON format.</param>
             <returns></returns>
             <example><![CDATA[  
             HTTP verb: POST
             URL:
             http://{URL}/api/{supercollection}/{collection}
            
             Request body:
             {
                  id: "{id}",
                  title: "{title}"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutCollection(System.String,System.String,Chronozoom.Entities.Collection)">
             <summary>
             Modifies an existing collection.
             </summary>
             <remarks>
             If the collection exists and the authenticated user is the author then the collection is modified. 
             If no author is registered then the authenticated user is set as the author. 
             The title field can't be modified because it is part of the URL (the URL can be indexed).
             </remarks>
             <param name="superCollectionName">The name of the parent supercollection.</param>
             <param name="collectionName">The name of the collection to create.</param>
             <param name="collectionRequest">[Collection](#collection) data in JSON format.</param>
             <returns></returns>
             <example><![CDATA[  
             HTTP verb: PUT
             URL:
             http://{URL}/api/{supercollection}/{collection}
            
             Request body:
             {
                  id: "{id}",
                  title: "{title}"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteCollection(System.String,System.String)">
            <summary>
            Deletes the specified collection.
            </summary>
            <param name="superCollectionName">The name of the parent collection.</param>
            <param name="collectionName">The name of the collection to delete.</param>
            <returns>HTTP response code.</returns>
            <example><![CDATA[  
            HTTP verb: DELETE
            URL:
            http://{URL}/api/{supercollection}/{collection}
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutTimeline(System.String,System.String,Chronozoom.Entities.TimelineRaw)">
             <summary>
             Creates or updates the timeline in a given collection. 
             </summary>
             <remarks>
             If an ID is specified but the collection does not exist, the request will fail ("not found" status).
             If an ID is not specified, a new timeline will be added to the collection. 
             For a new timeline, if the parent is not defined the root timeline will be set as the parent.
             If the timeline with the specified identifier exists, then the existing timeline is updated.
             </remarks>
             <param name="superCollectionName">The parent collection.</param>
             <param name="collectionName">The name of the collection to update.</param>
             <param name="timelineRequest">[Timeline](#timeline) data in JSON format.</param>
             <returns>HTTP status code.</returns>
             <example><![CDATA[  
             HTTP verb: PUT
             URL:
             http://{URL}/api/{supercollection}/{collection}/timeline
            
             Request body:
             {
                  ParentTimelineId: "ff5214e1-1bf4-4af5-8835-96cff2ce2cfd",
                  Regime: null - optional,
                  end: -377.945205,
                  start: -597.542466,
                  title: "Timeline Title"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteTimeline(System.String,System.String,Chronozoom.Entities.Timeline)">
             <summary>
             Deletes the timeline with the specified ID.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection from which the timeline should be deleted.</param>
             <param name="timelineRequest">The request in JSON format.</param>
             <example><![CDATA[  
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/timeline
            
             Request body:
             {
                  id: "0123456789"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutExhibit(System.String,System.String,Chronozoom.Entities.ExhibitRaw)">
             <summary>
             Creates or updates the exhibit and its content items in a given collection. If the collection does not exist, then the command will fail. Prior to running this command, you will need to create the associated content items.
             </summary>
             <remarks>
             If an exhibit id is not specified, a new exhibit is added to the collection. 
             If the ID for an existing exhibit is specified then the exhibit will be updated. 
             If the exhibit ID to be updated does not exist a "not found" status is returned. 
             If the parent timeline is not specified the exhibit is added to the root timeline. 
             Otherwise, the exhibit is added to the specified parent timeline. 
             If an invalid parent timeline is specified then the request will fail. 
             </remarks>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="exhibitRequest">[Exhibit](#exhibit) data in JSON format.</param>
             <returns>[Exhibit](#exhibit) data in JSON format.</returns>
             <example><![CDATA[  
             HTTP verb: PUT
             URL:
             http://{URL}/api/{supercollection}/{collection}/exhibit
            
             Request body:
             {
                 ParentTimelineId: "123456"
                 id: "0123456789",
                 title: "Mars Exploration",
                 contentItems: "{contentItems}" 
                 time: 565
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteExhibit(System.String,System.String,Chronozoom.Entities.Exhibit)">
             <summary>
             Deletes the specified exhibit from the specified collection.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="exhibitRequest">The exhibit request data in JSON format.</param>
             <example><![CDATA[  
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/exhibit
            
             Request body:
             {
                  id: "0123456789"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutContentItem(System.String,System.String,Chronozoom.Entities.ContentItemRaw)">
            <summary>
            Creates or updates the content item in a given collection. If the collection does not exist the request will fail.
            </summary>
            <param name="superCollectionName">The name of the parent collection.</param>
            <param name="collectionName">The name of the collection to modify.</param>
            <param name="contentItemRequest">[ContentItem](#contentitem) data in JSON format.</param>
            <returns></returns>
            <example><![CDATA[  
            HTTP verb: PUT
            URL:
            http://{URL}/api/{supercollection}/{collection}/contentitem
                         
            Request body:
            {
                id: "0123456789",
                title: "The Outer Planets",
                uri: "http://www.example.com/images/planets.png"
            }
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteContentItem(System.String,System.String,Chronozoom.Entities.ContentItem)">
             <summary>
             Delete the specified content item from the specified collection.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="contentItemRequest">The request data in JSON format.</param>
             <example><![CDATA[  
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/contentitem
            
             Request body:
             {
                  id: "0123456789"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutTour2(System.String,System.String,Chronozoom.Entities.Tour)">
             <summary>
             Creates or updates a tour with bookmark support.
             </summary>
             <remarks>
             All bookmarks in a tour must belong to the same collection and the user must have permission
             to modify that collection. Supported operations include:
             To Create a new tour, do not specify a tour id or bookmark ids for the new entities to be created.
             To modify an existing tour, specify the tour id and any of the tour fields (id, description, audio) that need to be modified.
             If a tour id is specified and it does not exist, a "not found" status is returned.
             If a tour id is specified and it exists, any specified fields are updated. 
             Delete all existing bookmarks and add bookmarks defined in the bookmarks JSON object to the tour.
             The sequence ids of the bookmarks are automatically generated based on the order they are received.
             If an invalid tour Id, bookmark Id or bookmark sequence Id is specified then the request will fail. 
             </remarks>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="tourRequest">The tour data in JSON format.</param>
             <returns>A list of guids of the tour guid followed by bookmark guids in JSON format.</returns>
             <example><![CDATA[  
             HTTP verb: PUT
             URL:
             http://{URL}/api/{supercollection}/{collection}/tour2
            
             Request body:
             {
                      
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteTour(System.String,System.String,Chronozoom.Entities.Tour)">
             <summary>
             Deletes the specified tour.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="tourRequest">The tour ID in JSON format.</param>
             <example><![CDATA[  
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/tour2
            
             Request body:
             {
                 id: "5c07b2bf-65e1-45e1-a9cd-792a7767d685"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutBookmarks(System.String,System.String,Chronozoom.Entities.Tour)">
             <summary>
             Adds a list of bookmarks to an existing tour.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="tourRequest">The request in JSON format.</param>
             <returns>A list of guids of tour guid followed by new bookmark guids in JSON format.</returns>
             <example><![CDATA[  
             HTTP verb: PUT
             URL:
             http://{URL}/api/{supercollection}/{collection}/{collectionName}/bookmark
            
             Request body:
             {
                  id: "0123456789"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.DeleteBookmarks(System.String,System.String,Chronozoom.Entities.Tour)">
             <summary>
             Delete a list of bookmarks belonging to the same tour.
             </summary>
             <param name="superCollectionName">The name of the parent collection.</param>
             <param name="collectionName">The name of the collection to modify.</param>
             <param name="tourRequest">The request in JSON format.</param>
             <example><![CDATA[
             HTTP verb: DELETE
             URL:
             http://{URL}/api/{supercollection}/{collection}/bookmark
            
             Request body:
             {
                  id: "0123456789"
             }
             ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetContentPath(System.String,System.String,System.String)">
            <summary>
            Retrieves a path to the given content id. For t48fbb8a8-7c5d-49c3-83e1-98939ae2ae6, this API retrieves /t00000000-0000-0000-0000-000000000000/t48fbb8a8-7c5d-49c3-83e1-98939ae2ae67
            </summary>
            <returns>The full path to the content.</returns>
            <example><![CDATA[
            HTTP verb: GET
            URL:
            http://{URL}/api/{supercollection}/{collection}/{reference}/contentpath
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetSuperCollections">
            <summary>
            Retrieve the list of all supercollections.
            </summary>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/supercollections
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetCollections(System.String)">
            <summary>
            Retrieve the list of all collections.
            </summary>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/{superCollection}/collections
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetCollection(System.String,System.String)">
            <summary>
            Returns core data for a single collection, including owner and theme. Members and timelines are not included.
            </summary>
            <param name="superCollection">Name of the super collection.</param>
            <param name="collection">Name of the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.FindUsers(System.String)">
            <summary>
            Returns a list of users whose display names match the partial display name provided as a parameter.
            </summary>
            <param name="partialName">Part of a User's DisplayName.</param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetExhibitLastUpdate(System.String)">
            <summary>
            Returns a string that can be used later to see when an exhibit was last changed, and who by.
            </summary>
            <param name="exhibitId"></param>
            <returns>A string consisting of date/time last change made and who made change, separated by a pipe.</returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.UserIsMember(System.String)">
            <summary>
            Returns true/false depending on if the currently logged in user has a membership to the specified collection or is the collection owner.
            i.e. Does the user have editing rights to the collection, even if not the owner. Anon user will always return false.
            </summary>
            <param name="collectionId">GUID of the collection. (Not of the super-collection.)</param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.UserCanEdit(System.String,System.String)">
            <summary>
            Returns true/false depending on if the currently logged in user has a membership to the specified collection or is the collection owner.
            i.e. Does the user have editing rights to the collection, even if not the owner. Anon user will always return false.
            An overload to the more efficient UserIsMember(string collectionId) for when the collectionId GUID is not already known.
            </summary>
            <param name="superCollection">Name of the super collection.</param>
            <param name="collection">Name of the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetMembers(System.String,System.String)">
            <summary>
            Returns a list of members and their user records who have editing rights to the specified collection.
            Does not necesssarily include owner in list.
            </summary>
            <param name="superCollection">Name of the super collection.</param>
            <param name="collection">Name of the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.PutMembers(System.String,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Sets the entire list of users who have editing rights to the specified collection.
            Note that this list is not an append list but the entire list, which replaces any existing list.
            </summary>
            <param name="superCollection">Name of the super collection.</param>
            <param name="collection">Name of the collection.</param>
            <param name="userIds">A list of all of the user ids which are to be given editing rights.</param>
            <returns>Success or failure Boolean. Will fail if submitting user is not the owner or not in the pre-existing editors' list.</returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetMimeTypeByUrl(System.String)">
            <summary>
            Retrieve file mime type by url
            </summary>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/mimetypebyurl
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetUserTimelines(System.String,System.String)">
            <summary>
            Returns timelines belonging to a particular collection.
            Ostensibly used to obtain the current users' timelines but could be used to obtain other users' timelines.
            </summary>
            <param name="superCollection"></param>
            <param name="Collection"></param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.IChronozoomSVC.GetEditableTimelines(System.Boolean)">
            <summary>
            Returns timelines that the current user can edit, usually excluding those owned by the current user.
            i.e. Can provide a list of other people's timelines that the current user has edit rights on.
            Has option to also include those owned by current user in addition to edit rights on others.
            </summary>
            <param name="includeMine">Boolean. Defaults to false. Whether or not to include current user's timelines.</param>
            <returns>A list of timeline shortcuts. Each shortcut includes the author, image URL, timeline URL and title.</returns>
        </member>
        <member name="M:Chronozoom.UI.ITwitterAPI.GetRecentTweets">
            <summary>
            Returns recent N timeline tweets of ChronoZoom Twitter account.
            </summary>
            <returns>Recent N timeline tweets of ChronoZoom Twitter account in JSON format.</returns>
            <example><![CDATA[  
            HTTP verb: GET
            URL:
            http://{URL}/api/twitter/getRecentTweets
            
            ]]></example>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.Chronozoom#UI#IBingSearchAPI#GetImages(System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.Chronozoom#UI#IBingSearchAPI#GetVideos(System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.Chronozoom#UI#IBingSearchAPI#GetDocuments(System.String,System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetEditableTimelines(System.Boolean)">
            <summary>
            Documented under IChronozoomSVC
            </summary>
            <param name="includeMine"></param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.Chronozoom#UI#ITwitterAPI#GetRecentTweets">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.ExportTimelines(System.String)">
            <summary>
            Documented under IChronozoomSVC
            </summary>
            <param name="topmostTimelineId"></param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.ImportTimelines(System.String,System.Collections.Generic.List{Chronozoom.UI.Utils.ExportImport.FlatTimeline})">
            <summary>
            Documented under IChronozoomSVC
            </summary>
            <param name="intoTimelineId"></param>
            <param name="newTimelineTree"></param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetTimelines(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.Search(System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetDefaultTours">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetTours(System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutUser(Chronozoom.Entities.User)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetServiceInformation">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteUser(Chronozoom.Entities.User)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetUser(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PostCollection(System.String,System.String,Chronozoom.Entities.Collection)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutCollection(System.String,System.String,Chronozoom.Entities.Collection)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteCollection(System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutTimeline(System.String,System.String,Chronozoom.Entities.TimelineRaw)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteTimeline(System.String,System.String,Chronozoom.Entities.Timeline)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutExhibit(System.String,System.String,Chronozoom.Entities.ExhibitRaw)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteExhibit(System.String,System.String,Chronozoom.Entities.Exhibit)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutContentItem(System.String,System.String,Chronozoom.Entities.ContentItemRaw)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteContentItem(System.String,System.String,Chronozoom.Entities.ContentItem)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PostTour(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutTour(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutTour2(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteTour(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutBookmarks(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.DeleteBookmarks(System.String,System.String,Chronozoom.Entities.Tour)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.UpdateSubtreeSize(Chronozoom.Entities.Storage,Chronozoom.Entities.Timeline,System.Int32)">
            <summary>
            Updates content item counts of all ancestor timelines
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetContentPath(System.String,System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetSuperCollections">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetCollections(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetCollection(System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.FindUsers(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            IdentityProvider null check is used to exclude anonymous users from results list
            </summary>
            <param name="partialName"></param>
            <returns></returns>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetExhibitLastUpdate(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.UserIsMember(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.UserCanEdit(System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetMembers(System.String,System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.PutMembers(System.String,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.GetMimeTypeByUrl(System.String)">
            <summary>
            Documentation under IChronozoomSVC
            </summary>
        </member>
        <member name="M:Chronozoom.UI.ChronozoomSVC.MimeTypeOfUrl(System.String)">
            <summary>
            Returns a MIME type of internet resource accessible via given Url. 
            Throws an exception if failed to access internet resource via given Url.
            </summary>
            <param name="url">Url to get MIME type of.</param>
            <returns>MIME type of internet resource accessible via given Url.</returns>
        </member>
        <member name="M:Bing.BingSearchContainer.Composite(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="Sources">Bing search sources Sample Values : web+image+video+news+spell</param>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="WebSearchOptions">Specify options for a request to the Web SourceType. Valid values are: DisableHostCollapsing, DisableQueryAlterations. Sample Values : DisableQueryAlterations</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
            <param name="WebFileType">File extensions to return Sample Values : XLS</param>
            <param name="ImageFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Size:Small, Size:Medium, Size:Large, Size:Width:[Width], Size:Height:[Height], Aspect:Square, Aspect:Wide, Aspect:Tall, Color:Color, Color:Monochrome, Style:Photo, Style:Graphics, Face:Face, Face:Portrait, Face:Other. Sample Values : Size:Small+Aspect:Square</param>
            <param name="VideoFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Duration:Short, Duration:Medium, Duration:Long, Aspect:Standard, Aspect:Widescreen, Resolution:Low, Resolution:Medium, Resolution:High. Sample Values : Duration:Short+Resolution:High</param>
            <param name="VideoSortBy">The sort order of results returned Sample Values : Date</param>
            <param name="NewsLocationOverride">Overrides Bing location detection. This parameter is only applicable in en-US market. Sample Values : US.WA</param>
            <param name="NewsCategory">The category of news for which to provide results Sample Values : rt_Business</param>
            <param name="NewsSortBy">The sort order of results returned Sample Values : Date</param>
        </member>
        <member name="M:Bing.BingSearchContainer.Web(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="WebSearchOptions">Specify options for a request to the Web SourceType. Valid values are: DisableHostCollapsing, DisableQueryAlterations. Sample Values : DisableQueryAlterations</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
            <param name="WebFileType">File extensions to return Sample Values : XLS</param>
        </member>
        <member name="M:Bing.BingSearchContainer.Image(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
            <param name="ImageFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Size:Small, Size:Medium, Size:Large, Size:Width:[Width], Size:Height:[Height], Aspect:Square, Aspect:Wide, Aspect:Tall, Color:Color, Color:Monochrome, Style:Photo, Style:Graphics, Face:Face, Face:Portrait, Face:Other. Sample Values : Size:Small+Aspect:Square</param>
        </member>
        <member name="M:Bing.BingSearchContainer.Video(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String)">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
            <param name="VideoFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Duration:Short, Duration:Medium, Duration:Long, Aspect:Standard, Aspect:Widescreen, Resolution:Low, Resolution:Medium, Resolution:High. Sample Values : Duration:Short+Resolution:High</param>
            <param name="VideoSortBy">The sort order of results returned Sample Values : Date</param>
        </member>
        <member name="M:Bing.BingSearchContainer.News(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
            <param name="NewsLocationOverride">Overrides Bing location detection. This parameter is only applicable in en-US market. Sample Values : US.WA</param>
            <param name="NewsCategory">The category of news for which to provide results Sample Values : rt_Business</param>
            <param name="NewsSortBy">The sort order of results returned Sample Values : Date</param>
        </member>
        <member name="M:Bing.BingSearchContainer.RelatedSearch(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xbox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
        </member>
        <member name="M:Bing.BingSearchContainer.SpellingSuggestions(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            </summary>
            <param name="Query">Bing search query Sample Values : xblox</param>
            <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
            <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
            <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
            <param name="Latitude">Latitude Sample Values : 47.603450</param>
            <param name="Longitude">Longitude Sample Values : -122.329696</param>
        </member>
        <member name="M:Chronozoom.UI.PageInformation.GetFileVersion(System.String)">
            <summary>
            Used to obtain a versioning value that can be used in a query string when linking static content such as .js and .css files.
            The versioning value changes every time the file is changed, and can be used so that browsers do not need to be manually refreshed by users when static content changes.
            For example, x.js?v=2014-12-31--17-30 is seen by browsers as a different file compared to x.js?v2015-01-01--00-00.
            It should be noted that this particular approach is not be suitable for a web farm unless sticky IPs are used on the load balancer.
            </summary>
            <param name="webPath">Optional path to static content file such as .js or .css file. Leave blank to use assembly build date/time.</param>
            <returns>GMT/UTC string based off of file creation date and time.</returns>
        </member>
        <member name="M:Chronozoom.UI.PageInformation.GetLastSchemaUpdate">
            <summary>
            Used to obtain a string that is unique for each version of the db schema.
            When importing a saved timeline, this is used to ensure that the timeline being imported
            was created under the same version of the db schema as is currently being run.
            </summary>
            <returns>A multipart string that includes a date prefix, but no need to break down further.</returns>
        </member>
        <member name="T:Chronozoom.UI.DefaultHttpHandler">
            <summary>
            Summary description for _default
            </summary>
        </member>
        <member name="M:Chronozoom.UI.DefaultHttpHandler.IsSuperCollectionPresent(System.String)">
            <summary>
            Validates if a supercollection is present.
            </summary>
            <param name="superCollection"></param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Chronozoom.UI.Crawler.UrlSuperCollection(System.Uri)">
            <summary>
            Parses the URL passed to the page to determine the SuperCollection.
            </summary>
            <param name="url">The URL passed to the code.</param>
            <returns>The URL segment for the SuperCollection.</returns>
        </member>
        <member name="M:Chronozoom.UI.Crawler.UrlCollection(System.Uri)">
            <summary>
            Parses the URL passed to the page to determine the Collection.
            </summary>
            <param name="url">The URL passed to the code.</param>
            <returns>The URL segment for a Collection.</returns>
        </member>
        <member name="M:Chronozoom.UI.Crawler.UrlGuid(System.Uri)">
            <summary>
            Parses the URL passed to the page to determine the GUID if the object being requested.
            
            </summary>
            <param name="url">The URL passed to the code.</param>
            <returns>The URL segment for a GUID.</returns>
        </member>
        <member name="M:Chronozoom.UI.Crawler.GetFriendlyUrl(System.Guid)">
            <summary>
            Takes the GUID of an object passed by the code and constructs a URL to refer to the object.
            </summary>
            <param name="id"> Should be a GUID from the database that refers to a Timeline, Exhibit, or ContentItem.</param>
            <returns>Constructs a FriendlyURL for use in the Crawler code.</returns>
        </member>
        <member name="M:Chronozoom.UI.Utils.PopulateDbFromJSON.MapViewSupportForTimelines(System.Collections.Generic.IEnumerable{Chronozoom.Entities.Timeline})">
            <summary>
            Recursivly set default value for MapType field in timeline entity if it is not set.
            </summary>
            <param name="timelines">Array of timelines to set fields for map view migration.</param>
        </member>
        <member name="T:Chronozoom.UI.Utils.ThumbnailGenerator">
            <summary>
            Helper class to generate content item thumbnails.
            </summary>
        </member>
        <member name="M:Chronozoom.UI.Utils.ThumbnailGenerator.#ctor(System.String)">
            <summary>
            Constructs a ThumbnailGenerator class
            </summary>
            <param name="thumbnailsStorage"></param>
        </member>
        <member name="M:Chronozoom.UI.Utils.ThumbnailGenerator.CreateThumbnails(Chronozoom.Entities.ContentItem)">
            <summary>
            Creates and uploades to storage thumbnails for the given content item.
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="T:ASC.Hrd.HrdClient">
            <summary>
            Abstracts the acquisition of the HRD JSON Feed
            </summary>
        </member>
        <member name="T:ASC.Hrd.HrdRequest">
            <summary>
            Represents a home realm discovery request
            </summary>
        </member>
        <member name="M:ASC.Hrd.HrdRequest.#ctor(System.String,System.String,ASC.Hrd.HrdRequest.Protocol,System.String,System.String,System.String)">
            <summary>
            Constructs HrdRequest
            </summary>
            <param name="issuer">The issuer url</param>
            <param name="realm">Realm of the relying party</param>
            <param name="protocol">Relying party protocol</param>
            <param name="replyTo">Optional reply_to for the relying party</param>
            <param name="context">Optional context for the request</param>
            <param name="callback">Optional callback method. When specified the response will include java script to call this method.</param>
        </member>
        <member name="M:ASC.Hrd.HrdRequest.GetUrlWithQueryString">
            <summary>
            Gets the url with its query string representing this request
            </summary>
            <returns></returns>
        </member>
        <member name="T:ASC.Models.HrdIdentityProvider">
            <summary>
            Identity Provider information in HRD JSON Feed
            </summary>
        </member>
        <member name="M:ASC.Util.NameValueCollectionExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Greates query string using the name value collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Chronozoom.UI.ServiceInformation">
            <summary>
            Provides a structure to retrieve information about this service.
            </summary>
        </member>
        <member name="P:Chronozoom.UI.ServiceInformation.ThumbnailsPath">
            <summary>
            The path to download thumbanils from.
            </summary>
        </member>
        <member name="P:Chronozoom.UI.ServiceInformation.SignInUrlMicrosoft">
            <summary>
            The URL to sign in with Microsoft account.
            </summary>
        </member>
        <member name="P:Chronozoom.UI.ServiceInformation.SignInUrlGoogle">
            <summary>
            The URL to sign in with Google account.
            </summary>
        </member>
        <member name="P:Chronozoom.UI.ServiceInformation.SignInUrlYahoo">
            <summary>
            The URL to sign in with Yahoo account.
            </summary>
        </member>
        <member name="M:Chronozoom.Api.Controllers.AccountController.GetUrlFromContext(System.Web.Mvc.FormCollection)">
            <summary>
            Gets from the form the context
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="F:Chronozoom.UI.SiteMaster.HeadContent">
            <summary>
            HeadContent control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Chronozoom.UI.SiteMaster.HeadLoginView">
            <summary>
            HeadLoginView control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Chronozoom.UI.SiteMaster.NavigationMenu">
            <summary>
            NavigationMenu control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Chronozoom.UI.SiteMaster.MainContent">
            <summary>
            MainContent control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
    </members>
</doc>
